// vite.config.ts
import yaml4 from "file:///E:/Exercises/Svelte/copy/awesome-sveltekit/site/node_modules/@rollup/plugin-yaml/dist/es/index.js";
import { sveltekit } from "file:///E:/Exercises/Svelte/copy/awesome-sveltekit/site/node_modules/@sveltejs/kit/src/exports/vite/index.js";

// src/tasks/fetch-github-metadata.ts
import dotenv from "file:///E:/Exercises/Svelte/copy/awesome-sveltekit/site/node_modules/dotenv/lib/main.js";
import fs from "fs";
import yaml from "file:///E:/Exercises/Svelte/copy/awesome-sveltekit/site/node_modules/js-yaml/dist/js-yaml.mjs";
import { marked } from "file:///E:/Exercises/Svelte/copy/awesome-sveltekit/site/node_modules/marked/lib/marked.esm.js";
import { performance } from "perf_hooks";
var __vite_injected_original_import_meta_url = "file:///E:/Exercises/Svelte/copy/awesome-sveltekit/site/src/tasks/fetch-github-metadata.ts";
function title_to_slug(title) {
  return title.toLowerCase().replaceAll(` `, `-`);
}
dotenv.config({ path: `../site/.env` });
async function fetch_github_metadata(options = {}) {
  const { action: action2 = `add-missing` } = options;
  const in_path = `../sites.yml`;
  const out_path = `../site/src/sites.yml`;
  const sites = yaml.load(fs.readFileSync(in_path));
  const old_sites = fs.existsSync(out_path) ? yaml.load(fs.readFileSync(out_path)) : [];
  const this_file = __vite_injected_original_import_meta_url.split(`/`).pop();
  console.log(`Running ${this_file}...`);
  const start = performance.now();
  const old_slugs = old_sites.map((site) => site.slug);
  const [seen_sites, skipped_sites, updated_sites] = [[], [], []];
  if (!process.env.GH_TOKEN) {
    console.error(`GH_TOKEN environment variable is not set.`);
    process.exit(1);
  }
  const headers = {
    authorization: `token ${process.env.GH_TOKEN}`
  };
  async function fetch_check(url) {
    const response = await fetch(url, { headers }).then((res) => res.json());
    if (response.message)
      throw new Error(response.message);
    return response;
  }
  function https_url(url) {
    if (!url)
      return null;
    if (url.startsWith(`http`))
      return url.replace(`http://`, `https://`);
    return `https://${url}`;
  }
  for (const site of sites) {
    const slug = title_to_slug(site.title);
    if (seen_sites.includes(slug))
      throw new Error(`Duplicate slug ${slug}`);
    else
      seen_sites.push(slug);
    site.slug = slug;
    if (site.repo && !site.tags.includes(`open source`)) {
      site.tags.push(`open source`);
      site.tags.sort((a, b) => a.localeCompare(b));
    }
    if (!site.repo || old_slugs.includes(slug) && action2 !== `update-existing`) {
      skipped_sites.push(slug);
      continue;
    }
    const repoHandle = site.repo.split(`github.com/`)[1];
    if (!repoHandle || repoHandle.split(`/`).length !== 2) {
      console.error(`bad repo handle ${repoHandle}`);
      skipped_sites.push(slug);
      continue;
    }
    try {
      const url = `https://api.github.com/repos/${repoHandle}`;
      const repo = await fetch_check(url);
      site.repo_stars = repo.stargazers_count;
    } catch (error) {
      console.error(`Error fetching stars for ${site.title}:`, error);
    }
    let contributors = await fetch_check(
      `https://api.github.com/repos/${repoHandle}/contributors`
    );
    contributors = contributors.filter((c) => c.contributions > 10 && c.type === `User`).sort((c1, c2) => c2.contributions - c1.contributions).slice(0, 5);
    contributors = await Promise.all(
      contributors.map(
        ({ url }) => fetch(url, { headers }).then((r) => r.json())
      )
    );
    site.contributors = contributors.map(
      ({ name, location, company, ...c }) => ({
        github: c.login,
        twitter: c.twitter_username,
        url: https_url(c.blog),
        avatar: c.avatar_url,
        name,
        location,
        company
      })
    );
    updated_sites.push(slug);
  }
  const new_sites = sites.map((site) => {
    const old_site = old_sites.find((old) => old.slug === site.slug) ?? {};
    for (const key of [`repo_stars`, `contributors`]) {
      if (site[key] === void 0)
        site[key] = old_site[key];
    }
    site.description = marked.parseInline(site.description);
    return site;
  });
  const wall_time = ((performance.now() - start) / 1e3).toFixed(2);
  const comment = `# auto-generated by ${this_file}

`;
  fs.writeFileSync(out_path, comment + yaml.dump(new_sites));
  console.log(
    `${this_file} took ${wall_time}s, updated ${updated_sites.length}, skipped ${skipped_sites.length}
`
  );
}

// src/tasks/screenshots.ts
import fs2 from "fs";
import yaml2 from "file:///E:/Exercises/Svelte/copy/awesome-sveltekit/site/node_modules/js-yaml/dist/js-yaml.mjs";
import { performance as performance2 } from "perf_hooks";
import puppeteer from "file:///E:/Exercises/Svelte/copy/awesome-sveltekit/site/node_modules/puppeteer/lib/esm/puppeteer/puppeteer.js";
import sharp from "file:///E:/Exercises/Svelte/copy/awesome-sveltekit/site/node_modules/sharp/lib/index.js";
var __vite_injected_original_import_meta_url2 = "file:///E:/Exercises/Svelte/copy/awesome-sveltekit/site/src/tasks/screenshots.ts";
async function make_screenshots(options = {}) {
  const { action: action2 = `add-missing` } = options;
  const start = performance2.now();
  const screenshot_dir = `../site/static/screenshots`;
  const sites = yaml2.load(fs2.readFileSync(`../site/src/sites.yml`)).sort((s1, s2) => s1.title.localeCompare(s2.title));
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  fs2.mkdirSync(screenshot_dir, { recursive: true });
  const arg = process.argv.find((arg2) => arg2.startsWith(`screenshots:`));
  if (action2 && ![`add-missing`, `update-existing`].includes(action2)) {
    throw new Error(
      `Correct usage: vite [dev] screenshots:[report|download|re-download], got ${arg}
`
    );
  }
  const msg = {
    "add-missing": `Adding screenshots for sites without them`,
    "update-existing": `Updating all existing screenshots`
  }[action2];
  console.log(msg);
  const [created, updated, skipped, existed] = [[], [], [], []];
  for (const [idx, site] of sites.entries()) {
    const { slug } = site;
    const img_path = `${screenshot_dir}/${slug}.avif`;
    const img_exists = fs2.existsSync(img_path);
    if (action2 != `update-existing` && img_exists) {
      existed.push(site.slug);
      continue;
    }
    console.log(`${idx + 1}/${sites.length}: ${slug}`);
    try {
      try {
        await page.goto(site.url, { timeout: 5e3, waitUntil: `networkidle2` });
      } catch (error) {
        if (error instanceof puppeteer.TimeoutError) {
          await page.goto(site.url, { timeout: 5e3, waitUntil: `load` });
        } else {
          throw error;
        }
      }
    } catch (error) {
      console.log(`skipping ${slug} due to ${error}`);
      skipped.push(site.slug);
    }
    await new Promise((r) => setTimeout(r, 2e3));
    await page.setViewport({ width: 1200, height: 900 });
    const hires = await page.screenshot();
    await page.setViewport({ width: 1200, height: 900, deviceScaleFactor: 0.5 });
    const lores = await page.screenshot();
    await sharp(hires).toFile(img_path);
    await sharp(lores).toFile(`${screenshot_dir}/${slug}.small.avif`);
    if (img_exists)
      updated.push(site.slug);
    else
      created.push(site.slug);
  }
  await browser.close();
  const wall_time = ((performance2.now() - start) / 1e3).toFixed(2);
  const this_file = __vite_injected_original_import_meta_url2.split(`/`).pop();
  if (created.length > 0 || updated.length > 0) {
    console.log(
      `${this_file} took ${wall_time}s, created ${created.length} new, ${updated.length} updated, ${skipped.length} skipped, ${existed.length} already had screenshots
`
    );
  } else {
    console.log(`No changes from ${this_file} in ${wall_time}s
`);
  }
  const existing_slugs = sites.map((site) => site.slug);
  for (const file of fs2.readdirSync(screenshot_dir)) {
    const slug = file.replace(`.small.avif`, ``).replace(`.avif`, ``);
    if (!existing_slugs.includes(slug)) {
      console.log(`deleting ${file}`);
      fs2.unlinkSync(`${screenshot_dir}/${file}`);
    }
  }
}

// src/tasks/update-readme.ts
import fs3 from "fs";
import yaml3 from "file:///E:/Exercises/Svelte/copy/awesome-sveltekit/site/node_modules/js-yaml/dist/js-yaml.mjs";
var __vite_injected_original_import_meta_url3 = "file:///E:/Exercises/Svelte/copy/awesome-sveltekit/site/src/tasks/update-readme.ts";
function update_readme() {
  const readme_path = `../readme.md`;
  const sites_path = `src/sites.yml`;
  const readme = fs3.readFileSync(readme_path, `utf8`);
  const sites = yaml3.load(fs3.readFileSync(sites_path));
  const new_line = `
   `;
  const new_sites = sites.sort((site_1, site_2) => {
    return (site_2.repo_stars ?? 0) - (site_1.repo_stars ?? 0);
  }).map((site) => {
    const { title, repo, uses, description, url, site_src } = site;
    if ([title, uses, description, url].includes(void 0)) {
      throw new Error(`missing field(s) in site '${title}'`);
    }
    try {
      let code_link = ``;
      if (repo) {
        const repo_handle = repo.split(`github.com/`)[1];
        if (repo_handle.split(`/`).length !== 2) {
          throw `bad repo handle ${repo_handle}`;
        }
        const star_badge = `<img src="https://img.shields.io/github/stars/${repo_handle}?logo=github" alt="GitHub stars" valign="middle">`;
        code_link = `&ensp;${new_line}[[code](${site_src ?? repo})]&ensp;${new_line}<a href="${repo}/stargazers">${new_line}${star_badge}${new_line}</a>`;
      }
      let metadata = description;
      if ((uses == null ? void 0 : uses.length) > 0) {
        metadata += `<br>
${new_line}uses: [${uses.join(`], [`)}]`;
      }
      return `1. **[${title}](${url})**${code_link}
${new_line}${metadata}
`;
    } catch (err) {
      throw `${err} for site '${title}'`;
    }
  }).join(`
`);
  const uses_links = Object.entries(yaml3.load(fs3.readFileSync(`../tools.yml`))).map(([name, url]) => `[${name}]: ${url}`).join(`
`);
  const new_readme = readme.replace(
    /## Sites\n\n[\s\S]+\n\n## /,
    // match everything up to next heading
    `## Sites

${new_sites}
${uses_links}

## `
  );
  fs3.writeFileSync(readme_path, new_readme);
  const this_file = __vite_injected_original_import_meta_url3.split(`/`).pop();
  console.log(`${this_file} updated readme
`);
}

// src/tasks/index.ts
var action_types = [`add-missing`, `update-existing`];

// vite.config.ts
var _a;
var action = ((_a = process.env) == null ? void 0 : _a.ACTION) ?? `add-missing`;
if (!action_types.includes(action)) {
  const types_str = action_types.join(`|`);
  throw new Error(
    `Correct usage: ACTION=${types_str} vite dev, got ACTION=${action}
`
  );
}
update_readme();
if (!process.env.CI)
  fetch_github_metadata({ action });
setTimeout(() => make_screenshots({ action }), 1e3);
var vite_config_default = {
  plugins: [sveltekit(), yaml4()],
  server: {
    fs: { allow: [`../..`] },
    // needed to import from $root
    port: 3e3
  },
  preview: {
    port: 3e3
  }
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
